package server.api;

import static com.google.common.base.MoreObjects.firstNonNull;

import com.google.common.collect.Maps;
import com.google.common.io.Files;
import commons.entities.ActivityDTO;
import java.net.URI;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import server.database.entities.question.Activity;
import server.database.repositories.question.ActivityRepository;
import server.services.storage.StorageService;

/**
 * Controller for adding activities.
 */
@RestController
@RequestMapping("/api/activity")
@Slf4j
public class ActivityController {
    @Autowired
    private ActivityRepository activityRepository;

    @Autowired
    private StorageService storageService;

    /**
     * Batch create/update activities.
     *
     * @param activities List of activities to add.
     * @param images List of pictures to add.
     * @return DTOs of all added activities.
     */
    @PostMapping("/batch")
    ResponseEntity batchAddActivity(@RequestBody List<ActivityDTO> activities,
                                    @RequestBody(required = false) List<MultipartFile> images) {
        // Map client-provided IDs to image files
        Map<UUID, MultipartFile> imageMap = Maps.uniqueIndex(firstNonNull(images, new ArrayList<>()),
                (MultipartFile f) -> UUID.fromString(f.getName()));

        List<ActivityDTO> addedActivities = activities.stream().map(activityDTO -> {

            // If the provided ID is not null, we expect an image.
            if (activityDTO.getId() != null) {
                // Get the UUID assigned by client
                UUID id = activityDTO.getId();

                MultipartFile image = imageMap.get(id);
                if (image == null) {
                    log.warn("No image provided for activity '{}'", id);
                    throw new IllegalArgumentException("No image provided for activity " + id);
                }

                // Clear the ID so that it is generated by the database when we save the activity
                activityDTO.setId(null);

                // Save the image
                String localFilename = String.format("%s.%s", id, Files.getFileExtension(
                        Objects.requireNonNull(image.getOriginalFilename())));
                URI imageUri = storageService.getURI(localFilename);
                Path localPath = storageService.store(image, localFilename);

                // Update the activity DTO with the image URL
                activityDTO.setIcon(imageUri.toString());

                log.trace("Saved image '{}' for activity '{}' to '{}'", localFilename, id, localPath);
            }

            // Save the activity
            Activity activity = new Activity(activityDTO);
            // Update the activity with the ID generated by the database
            activity = activityRepository.save(activity);

            log.trace("Added activity '{}'", activity.getId());
            return activity.getDTO();
        }).collect(Collectors.toList());

        log.debug("Added {} activities", activities.size());
        return new ResponseEntity<>(addedActivities, HttpStatus.CREATED);
    }

    /**
     * Get the URL of the image for the specified activity.
     *
     * @param id ID of the activity to get.
     * @return URL of the image associated with the activity.
     */
    @GetMapping("/{id}/image")
    ResponseEntity getActivityImage(@PathVariable UUID id) {
        log.trace("Getting image for activity '{}'", id);
        return activityRepository.findById(id)
                .map(activity -> ResponseEntity.ok(activity.getIcon()))
                .orElseGet(() -> ResponseEntity.status(HttpStatus.NOT_FOUND).body("Activity not found"));
    }
}
